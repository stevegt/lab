digraph AcyclicSingleGraph {
    rankdir=LR;

    // Set up the first connections
    node [shape=circle];
    A -> B;
    C -> D;

    // Hyperedge with multiple tails and heads
    node [shape=point];
    B -> E;
    D -> E;

    node [shape=circle];
    E -> F;
    E -> G;

    // Second segment with multiple tails and heads
    node [shape=circle];
    H -> I;
    J -> K;

    node [shape=point];
    F -> L;
    G -> L;
    I -> L;

    node [shape=circle];
    L -> M;
    L -> N;

    // A new hyperedge connecting multiple nodes
    node [shape=point];
    M -> O;
    N -> O;

    node [shape=circle];
    O -> P;
    O -> Q;

    // Hyperedge with more tails than heads
    node [shape=point];
    P -> R;
    Q -> S;

    node [shape=circle];
    R -> T;
    S -> U;

    // Continuing to interconnect all nodes
    node [shape=point];
    T -> V;
    U -> V;

    node [shape=circle];
    V -> W;
    V -> X;

    // A hyperedge branching into multiple heads
    node [shape=point];
    W -> Y;
    X -> Z;

    node [shape=circle];
    Y -> A1;
    Z -> B1;

    // More hyperedges with diverse head/tail counts
    node [shape=point];
    A1 -> C1;
    B1 -> C1;

    node [shape=circle];
    C1 -> D1;
    C1 -> E1;

    // More complex hyperedge connections
    node [shape=point];
    D1 -> F1;
    E1 -> F1;

    node [shape=circle];
    F1 -> G1;
    F1 -> H1;

    // Final segment ensuring no cycles
    node [shape=point];
    G1 -> I1;
    H1 -> I1;

    node [shape=circle];
    I1 -> J1;
    I1 -> K1;
}
